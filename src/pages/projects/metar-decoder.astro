---
import ProjectLayout from "../../layouts/ProjectLayout.astro";

---

<ProjectLayout title="METAR Decoder">
  <h1 class="centered">METAR Decoder</h1>

  <div class="input-section">
    <form id="metarForm">
      <label for="airportCode">Enter ICAO Code:</label>
      <input
        type="text"
        id="airportCode"
        name="airportCode"
        placeholder="e.g., KSBN"
        required
      />
      <button type="submit">Get METAR</button>
    </form>
  </div>

  <h2>Decoded METAR Data</h2>
  <table class="metar-table">
    <thead>
      <tr>
        <th>Field</th>
        <th>Value</th>
      </tr>
    </thead>

    <tbody class="metars" id="staticData">
      <tr><td><strong>Raw METAR</strong></td><td id="rawMetar">—</td></tr>
      <tr><td><strong>Altimeter</strong></td><td id="altimeter">—</td></tr>
      <tr><td><strong>Temperature</strong></td><td id="temperature">—</td></tr>
      <tr><td><strong>Dew Point</strong></td><td id="dewPoint">—</td></tr>
      <tr><td><strong>Wind</strong></td><td id="wind">—</td></tr>
      <tr
        ><td><strong>Relative Humidity</strong></td><td id="relative_humidity"
          >—</td
        ></tr
      >
      <tr><td><strong>Visibility</strong></td><td id="visibility">—</td></tr>
      <tr><td><strong>Pressure</strong></td><td id="pressure">—</td></tr>
      <tr><td><strong>Flight Rules</strong></td><td id="flightRules">—</td></tr>
      <tr><td><strong>Clouds</strong></td><td id="clouds">—</td></tr>
    </tbody>

    <!-- Weather Conditions Section -->
    <tbody id="weatherConditionsSection">
      <tr
        ><td colspan="2" style="text-align: center;"
          ><strong>Weather Conditions</strong></td
        ></tr
      >
    </tbody>
    <tbody id="weatherConditionsContainer"></tbody>

    <!-- Remarks Section -->
    <tbody id="remarksSection">
      <tr
        ><td colspan="2" style="text-align: center;"
          ><strong>Remarks</strong></td
        ></tr
      >
    </tbody>
    <tbody id="remarksContainer"></tbody>
  </table>

  <script is:inline>
    document
      .getElementById("metarForm")
      .addEventListener("submit", async function (event) {
        event.preventDefault();

        const airport = document
          .getElementById("airportCode")
          .value.toUpperCase();
        console.log("Sending request for airport:", airport);

        try {
          const response = await fetch(
            `/api/metar?airport=${encodeURIComponent(airport)}`
          );
          console.log("Fetch Response:", response);

          const data = await response.json();
          console.log("API Response:", data);

          if (data.error) {
            alert("Error: " + data.error);
            return;
          }

          // ✅ Update static fields
          document.getElementById("rawMetar").textContent = data.raw || "N/A";
          document.getElementById("altimeter").textContent =
            data.altimeter?.value ?? "N/A";
          document.getElementById("temperature").textContent =
            data.temperature?.value + "°C" ?? "N/A";
          document.getElementById("dewPoint").textContent =
            data.dewpoint?.value + "°C" ?? "N/A";
          document.getElementById("relative_humidity").textContent =
            data.relative_humidity ?? "N/A";
          document.getElementById("wind").textContent =
            `${data.wind_direction.repr}° at ${data.wind_speed.repr} knots` ??
            "N/A";
          document.getElementById("visibility").textContent =
            data.visibility?.value + " miles" ?? "N/A";
          document.getElementById("pressure").textContent =
            data.altimeter?.value + " inHg" ?? "N/A";
          document.getElementById("flightRules").textContent =
            data.flight_rules ?? "N/A";
          document.getElementById("clouds").textContent =
            data.clouds?.map((cloud) => cloud.repr).join(", ") || "Clear";

          // ✅ Handle wx_codes (Weather Conditions)
          const weatherContainer = document.getElementById(
            "weatherConditionsContainer"
          );
          if (weatherContainer) {
            weatherContainer.innerHTML = ""; // Clear previous entries
            if (data.wx_codes?.length) {
              data.wx_codes.forEach((code) => {
                const row = document.createElement("tr");
                row.innerHTML = `<td><strong>${code.repr}</strong></td><td>${code.value}</td>`;
                weatherContainer.appendChild(row);
              });
            }
          }

          // ✅ Handle remarks_info (Remarks)
          const remarksContainer = document.getElementById("remarksContainer");
          if (remarksContainer) {
            remarksContainer.innerHTML = ""; // Clear previous entries
            if (data.remarks_info?.codes?.length) {
              data.remarks_info.codes.forEach((remark) => {
                const row = document.createElement("tr");
                row.innerHTML = `<td><strong>${remark.repr}</strong></td><td>${remark.value}</td>`;
                remarksContainer.appendChild(row);
              });
            }
          }

          // ✅ Hide sections if no data
          document.getElementById("weatherConditionsSection").style.display =
            data.wx_codes?.length ? "table-row-group" : "none";

          document.getElementById("remarksSection").style.display = data
            .remarks_info?.codes?.length
            ? "table-row-group"
            : "none";
        } catch (error) {
          console.error("Error retrieving METAR:", error);
          alert("Error retrieving METAR data.");
        }
      });
  </script>

  <style lang="scss">
    .input-section {
      margin-bottom: 20px;
    }
  </style>
</ProjectLayout>
