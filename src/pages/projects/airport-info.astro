---
import ProjectLayout from "@/layouts/ProjectLayout.astro";
---

<ProjectLayout title="Airport Info">
  <h1 class="centered">Airport Information</h1>

  <div class="input-section">
    <form id="airportForm">
      <label for="airportCode">Enter ICAO Code:</label>
      <input type="text" id="airportCode" name="airportCode" placeholder="e.g., KSBN" required />
      <button type="submit">Get Airport Data</button>
    </form>
  </div>

  <h2>Airport Data</h2>
  <table class="airport-table">
    <thead>
      <tr>
        <th>Field</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody id="airportData">
      <tr><td><strong>Name</strong></td><td id="name">—</td></tr>
      <tr><td><strong>ICAO</strong></td><td id="icao_code">—</td></tr>
      <tr><td><strong>IATA</strong></td><td id="iata_code">—</td></tr>
      <tr><td><strong>Type</strong></td><td id="type">—</td></tr>
      <tr><td><strong>Latitude</strong></td><td id="latitude_deg">—</td></tr>
      <tr><td><strong>Longitude</strong></td><td id="longitude_deg">—</td></tr>
      <tr><td><strong>Elevation (ft)</strong></td><td id="elevation_ft">—</td></tr>
      <tr><td><strong>Country</strong></td><td id="iso_country">—</td></tr>
      <tr><td><strong>Region</strong></td><td id="iso_region">—</td></tr>
      <tr><td><strong>Municipality</strong></td><td id="municipality">—</td></tr>
      <!-- Conditionally shown rows for links -->
      <tr id="homeLinkRow"><td><strong>Home Link</strong></td><td id="home_link">—</td></tr>
      <tr id="wikipediaLinkRow"><td><strong>Wikipedia</strong></td><td id="wikipedia_link">—</td></tr>
    </tbody>

    <!-- Frequencies Section -->
    <tbody id="freqSection">
      <tr>
        <td colspan="2" style="text-align: center;"><strong>Frequencies</strong></td>
      </tr>
    </tbody>
    <tbody id="freqContainer"></tbody>

    <!-- Runways Section -->
    <tbody id="runwaysSection">
      <tr>
        <td colspan="2" style="text-align: center;"><strong>Runways</strong></td>
      </tr>
    </tbody>
    <tbody id="runwaysContainer"></tbody>
  </table>

  <script is:inline>
    document.getElementById("airportForm").addEventListener("submit", async function (event) {
      event.preventDefault();

      const airport = document.getElementById("airportCode").value.toUpperCase();
      console.log("Sending request for airport:", airport);

      try {
        const response = await fetch(`/api/airportdb?airport=${encodeURIComponent(airport)}`);
        console.log("Fetch Response:", response);

        const data = await response.json();
        console.log("API Response:", data);

        if (data.error) {
          alert("Error: " + data.error);
          return;
        }

        // Update static fields
        document.getElementById("name").textContent = data.name || "N/A";
        document.getElementById("icao_code").textContent = data.icao_code || "N/A";
        document.getElementById("iata_code").textContent = data.iata_code || "N/A";

        // Process and update the airport type (e.g., "small_airport" becomes "Small")
        let airportType = data.type || "N/A";
        if (airportType !== "N/A") {
          const parts = airportType.split("_");
          airportType = parts[0].charAt(0).toUpperCase() + parts[0].slice(1);
        }
        document.getElementById("type").textContent = airportType;

        document.getElementById("latitude_deg").textContent = data.latitude_deg || "N/A";
        document.getElementById("longitude_deg").textContent = data.longitude_deg || "N/A";
        document.getElementById("elevation_ft").textContent = data.elevation_ft || "N/A";
        document.getElementById("iso_country").textContent = data.iso_country || "N/A";
        document.getElementById("iso_region").textContent = data.iso_region || "N/A";
        document.getElementById("municipality").textContent = data.municipality || "N/A";

        // Conditionally add Home Link row
        if (data.home_link) {
          document.getElementById("home_link").innerHTML = `<a href="${data.home_link}" target="_blank">${data.home_link}</a>`;
        } else {
          // Remove the entire row if the home link doesn't exist
          const homeRow = document.getElementById("homeLinkRow");
          if (homeRow) homeRow.remove();
        }

        // Conditionally add Wikipedia Link row
        if (data.wikipedia_link) {
          document.getElementById("wikipedia_link").innerHTML = `<a href="${data.wikipedia_link}" target="_blank">${data.wikipedia_link}</a>`;
        } else {
          // Remove the entire row if the wikipedia link doesn't exist
          const wikiRow = document.getElementById("wikipediaLinkRow");
          if (wikiRow) wikiRow.remove();
        }

        // --- Frequencies Section ---
        const freqContainer = document.getElementById("freqContainer");
        freqContainer.innerHTML = ""; // Clear previous entries
        if (data.freqs && data.freqs.length > 0) {
          data.freqs.forEach(freq => {
            const row = document.createElement("tr");
            row.innerHTML = `<td><strong>${freq.description}</strong></td><td>${freq.frequency_mhz} MHz</td>`;
            freqContainer.appendChild(row);
          });
          document.getElementById("freqSection").style.display = "table-row-group";
        } else {
          document.getElementById("freqSection").style.display = "none";
        }

        // --- Runways Section ---
        const runwaysContainer = document.getElementById("runwaysContainer");
        runwaysContainer.innerHTML = ""; // Clear previous entries
        if (data.runways && data.runways.length > 0) {
          data.runways.forEach(runway => {
            // Create a runway identifier by combining le_ident and he_ident if available
            const runwayIdent = runway.le_ident && runway.he_ident 
              ? `${runway.le_ident} / ${runway.he_ident}` 
              : (runway.le_ident || "N/A");

            // Create a details string with dimensions and surface info
            const dimensions = runway.length_ft && runway.width_ft 
              ? `${runway.length_ft} ft x ${runway.width_ft} ft` 
              : "N/A";
            const surface = runway.surface || "N/A";

            // Append "Lighted" if runway.lighted equals "1"
            const lightedText = runway.lighted === "1" ? " Lighted" : "";

            const row = document.createElement("tr");
            row.innerHTML = `<td><strong>${runwayIdent}</strong></td><td>Dimensions: ${dimensions}, Surface: ${surface}${lightedText}</td>`;
            runwaysContainer.appendChild(row);
          });
          document.getElementById("runwaysSection").style.display = "table-row-group";
        } else {
          document.getElementById("runwaysSection").style.display = "none";
        }

      } catch (error) {
        console.error("Error retrieving airport data:", error);
        alert("Error retrieving airport data.");
      }
    });
  </script>

  <style>
    .input-section {
      margin-bottom: 20px;
    }
    .airport-table {
      width: 100%;
      border-collapse: collapse;
    }
  </style>
</ProjectLayout>
